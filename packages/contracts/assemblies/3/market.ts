/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../scripts/common-types';

export type CrossAddressStruct = { eth: AddressLike; sub: BigNumberish };

export type CrossAddressStructOutput = [eth: string, sub: bigint] & {
  eth: string;
  sub: bigint;
};

export type RoyaltyAmountStruct = {
  crossAddress: CrossAddressStruct;
  amount: BigNumberish;
};

export type RoyaltyAmountStructOutput = [
  crossAddress: CrossAddressStructOutput,
  amount: bigint
] & { crossAddress: CrossAddressStructOutput; amount: bigint };

export declare namespace Market {
  export type OrderStruct = {
    id: BigNumberish;
    collectionId: BigNumberish;
    tokenId: BigNumberish;
    amount: BigNumberish;
    price: BigNumberish;
    currency: BigNumberish;
    seller: CrossAddressStruct;
  };

  export type OrderStructOutput = [
    id: bigint,
    collectionId: bigint,
    tokenId: bigint,
    amount: bigint,
    price: bigint,
    currency: bigint,
    seller: CrossAddressStructOutput
  ] & {
    id: bigint;
    collectionId: bigint;
    tokenId: bigint;
    amount: bigint;
    price: bigint;
    currency: bigint;
    seller: CrossAddressStructOutput;
  };

  export type CurrencyStruct = {
    isAvailable: boolean;
    collectionId: BigNumberish;
    fee: BigNumberish;
  };

  export type CurrencyStructOutput = [
    isAvailable: boolean,
    collectionId: bigint,
    fee: bigint
  ] & { isAvailable: boolean; collectionId: bigint; fee: bigint };
}

export interface MarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addCurrency"
      | "addToBlacklist"
      | "admins"
      | "availableCurrencies"
      | "buildVersion"
      | "buy"
      | "changePrice"
      | "checkApproved"
      | "ctime"
      | "getCurrency"
      | "getOrder"
      | "initialize"
      | "marketFee"
      | "owner"
      | "ownerAddress"
      | "put"
      | "removeAdmin"
      | "removeCurrency"
      | "removeFromBlacklist"
      | "renounceOwnership"
      | "revoke"
      | "revokeAdmin"
      | "revokeListAdmin"
      | "setRoyaltyHelpers"
      | "transferOwnership"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "TokenIsApproved"
      | "TokenIsPurchased"
      | "TokenIsUpForSale"
      | "TokenPriceChanged"
      | "TokenRevoke"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCurrency",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "availableCurrencies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buildVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, BigNumberish, CrossAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "changePrice",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkApproved",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ctime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "marketFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "put",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      CrossAddressStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdmin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeListAdmin",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyHelpers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [CrossAddressStruct, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ctime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "put", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeListAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyHelpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenIsApprovedEvent {
  export type InputTuple = [version: BigNumberish, item: Market.OrderStruct];
  export type OutputTuple = [version: bigint, item: Market.OrderStructOutput];
  export interface OutputObject {
    version: bigint;
    item: Market.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenIsPurchasedEvent {
  export type InputTuple = [
    version: BigNumberish,
    item: Market.OrderStruct,
    salesAmount: BigNumberish,
    buyer: CrossAddressStruct,
    royalties: RoyaltyAmountStruct[]
  ];
  export type OutputTuple = [
    version: bigint,
    item: Market.OrderStructOutput,
    salesAmount: bigint,
    buyer: CrossAddressStructOutput,
    royalties: RoyaltyAmountStructOutput[]
  ];
  export interface OutputObject {
    version: bigint;
    item: Market.OrderStructOutput;
    salesAmount: bigint;
    buyer: CrossAddressStructOutput;
    royalties: RoyaltyAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenIsUpForSaleEvent {
  export type InputTuple = [version: BigNumberish, item: Market.OrderStruct];
  export type OutputTuple = [version: bigint, item: Market.OrderStructOutput];
  export interface OutputObject {
    version: bigint;
    item: Market.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPriceChangedEvent {
  export type InputTuple = [version: BigNumberish, item: Market.OrderStruct];
  export type OutputTuple = [version: bigint, item: Market.OrderStructOutput];
  export interface OutputObject {
    version: bigint;
    item: Market.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRevokeEvent {
  export type InputTuple = [
    version: BigNumberish,
    item: Market.OrderStruct,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    version: bigint,
    item: Market.OrderStructOutput,
    amount: bigint
  ];
  export interface OutputObject {
    version: bigint;
    item: Market.OrderStructOutput;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Market extends BaseContract {
  connect(runner?: ContractRunner | null): Market;
  waitForDeployment(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  addCurrency: TypedContractMethod<
    [collectionId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  addToBlacklist: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  availableCurrencies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        isAvailable: boolean;
        collectionId: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;

  buildVersion: TypedContractMethod<[], [bigint], "view">;

  buy: TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      buyer: CrossAddressStruct
    ],
    [void],
    "payable"
  >;

  changePrice: TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      price: BigNumberish,
      currency: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  checkApproved: TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  ctime: TypedContractMethod<[], [bigint], "view">;

  getCurrency: TypedContractMethod<
    [collectionId: BigNumberish],
    [Market.CurrencyStructOutput],
    "view"
  >;

  getOrder: TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [Market.OrderStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  marketFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerAddress: TypedContractMethod<[], [string], "view">;

  put: TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      price: BigNumberish,
      currency: BigNumberish,
      amount: BigNumberish,
      seller: CrossAddressStruct
    ],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  removeCurrency: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeFromBlacklist: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revoke: TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeAdmin: TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeListAdmin: TypedContractMethod<
    [collectionId: BigNumberish, tokenIdList: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setRoyaltyHelpers: TypedContractMethod<
    [royaltyHelpersAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [to: CrossAddressStruct, currency: BigNumberish, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addCurrency"
  ): TypedContractMethod<
    [collectionId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToBlacklist"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "availableCurrencies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        isAvailable: boolean;
        collectionId: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "buildVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      buyer: CrossAddressStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changePrice"
  ): TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      price: BigNumberish,
      currency: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkApproved"
  ): TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ctime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrency"
  ): TypedContractMethod<
    [collectionId: BigNumberish],
    [Market.CurrencyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [Market.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "marketFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "put"
  ): TypedContractMethod<
    [
      collectionId: BigNumberish,
      tokenId: BigNumberish,
      price: BigNumberish,
      currency: BigNumberish,
      amount: BigNumberish,
      seller: CrossAddressStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeCurrency"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAdmin"
  ): TypedContractMethod<
    [collectionId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeListAdmin"
  ): TypedContractMethod<
    [collectionId: BigNumberish, tokenIdList: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyaltyHelpers"
  ): TypedContractMethod<
    [royaltyHelpersAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: CrossAddressStruct, currency: BigNumberish, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenIsApproved"
  ): TypedContractEvent<
    TokenIsApprovedEvent.InputTuple,
    TokenIsApprovedEvent.OutputTuple,
    TokenIsApprovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenIsPurchased"
  ): TypedContractEvent<
    TokenIsPurchasedEvent.InputTuple,
    TokenIsPurchasedEvent.OutputTuple,
    TokenIsPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TokenIsUpForSale"
  ): TypedContractEvent<
    TokenIsUpForSaleEvent.InputTuple,
    TokenIsUpForSaleEvent.OutputTuple,
    TokenIsUpForSaleEvent.OutputObject
  >;
  getEvent(
    key: "TokenPriceChanged"
  ): TypedContractEvent<
    TokenPriceChangedEvent.InputTuple,
    TokenPriceChangedEvent.OutputTuple,
    TokenPriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRevoke"
  ): TypedContractEvent<
    TokenRevokeEvent.InputTuple,
    TokenRevokeEvent.OutputTuple,
    TokenRevokeEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenIsApproved(uint32,tuple)": TypedContractEvent<
      TokenIsApprovedEvent.InputTuple,
      TokenIsApprovedEvent.OutputTuple,
      TokenIsApprovedEvent.OutputObject
    >;
    TokenIsApproved: TypedContractEvent<
      TokenIsApprovedEvent.InputTuple,
      TokenIsApprovedEvent.OutputTuple,
      TokenIsApprovedEvent.OutputObject
    >;

    "TokenIsPurchased(uint32,tuple,uint32,tuple,tuple[])": TypedContractEvent<
      TokenIsPurchasedEvent.InputTuple,
      TokenIsPurchasedEvent.OutputTuple,
      TokenIsPurchasedEvent.OutputObject
    >;
    TokenIsPurchased: TypedContractEvent<
      TokenIsPurchasedEvent.InputTuple,
      TokenIsPurchasedEvent.OutputTuple,
      TokenIsPurchasedEvent.OutputObject
    >;

    "TokenIsUpForSale(uint32,tuple)": TypedContractEvent<
      TokenIsUpForSaleEvent.InputTuple,
      TokenIsUpForSaleEvent.OutputTuple,
      TokenIsUpForSaleEvent.OutputObject
    >;
    TokenIsUpForSale: TypedContractEvent<
      TokenIsUpForSaleEvent.InputTuple,
      TokenIsUpForSaleEvent.OutputTuple,
      TokenIsUpForSaleEvent.OutputObject
    >;

    "TokenPriceChanged(uint32,tuple)": TypedContractEvent<
      TokenPriceChangedEvent.InputTuple,
      TokenPriceChangedEvent.OutputTuple,
      TokenPriceChangedEvent.OutputObject
    >;
    TokenPriceChanged: TypedContractEvent<
      TokenPriceChangedEvent.InputTuple,
      TokenPriceChangedEvent.OutputTuple,
      TokenPriceChangedEvent.OutputObject
    >;

    "TokenRevoke(uint32,tuple,uint32)": TypedContractEvent<
      TokenRevokeEvent.InputTuple,
      TokenRevokeEvent.OutputTuple,
      TokenRevokeEvent.OutputObject
    >;
    TokenRevoke: TypedContractEvent<
      TokenRevokeEvent.InputTuple,
      TokenRevokeEvent.OutputTuple,
      TokenRevokeEvent.OutputObject
    >;
  };
}


export type MarketEventNames = "Initialized" | "OwnershipTransferred" | "TokenIsApproved" | "TokenIsPurchased" | "TokenIsUpForSale" | "TokenPriceChanged" | "TokenRevoke";
