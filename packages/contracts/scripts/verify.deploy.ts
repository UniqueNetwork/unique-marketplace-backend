import { ethers } from 'ethers';
import Web3 from 'web3';
import { AbiItem } from 'web3-utils';

const bytecodeVerifyMessage =
  '608060405234801561001057600080fd5b50610962806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063659934c11461003b578063d48ff1191461006b575b600080fd5b6100556004803603810190610050919061038d565b61009b565b6040516100629190610435565b60405180910390f35b61008560048036038101906100809190610596565b61015e565b6040516100929190610435565b60405180910390f35b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016100eb9291906106ab565b6040516020818303038152906040528051906020012090506001818787876040516000815260200160405260405161012694939291906106f1565b6020604051602081039080840390855afa158015610148573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b6000806040518060400160405280602081526020017f19457468657265756d205369676e6564204d6573736167653a0a303030303030815250905060008087519050603983019150620f423f8111156101b657600080fd5b600080620186a090505b6000811461025a57600081846101d6919061079e565b9050600081036101fe57600083036101fd57600a826101f5919061079e565b9150506101c0565b5b8280610209906107cf565b93505081816102189190610817565b846102239190610859565b9350600a82610232919061079e565b9150603081610241919061088d565b9050848061024e906107cf565b955050808553506101c0565b6000820361026b57601b915061027b565b601a82610278919061088d565b91505b8185526000858b604051602001610293929190610908565b6040516020818303038152906040528051906020012090506001818b8b8b604051600081526020016040526040516102ce94939291906106f1565b6020604051602081039080840390855afa1580156102f0573d6000803e3d6000fd5b505050602060405103519650505050505050949350505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6103318161031e565b811461033c57600080fd5b50565b60008135905061034e81610328565b92915050565b600060ff82169050919050565b61036a81610354565b811461037557600080fd5b50565b60008135905061038781610361565b92915050565b600080600080608085870312156103a7576103a6610314565b5b60006103b58782880161033f565b94505060206103c687828801610378565b93505060406103d78782880161033f565b92505060606103e88782880161033f565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061041f826103f4565b9050919050565b61042f81610414565b82525050565b600060208201905061044a6000830184610426565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a38261045a565b810181811067ffffffffffffffff821117156104c2576104c161046b565b5b80604052505050565b60006104d561030a565b90506104e1828261049a565b919050565b600067ffffffffffffffff8211156105015761050061046b565b5b61050a8261045a565b9050602081019050919050565b82818337600083830152505050565b6000610539610534846104e6565b6104cb565b90508281526020810184848401111561055557610554610455565b5b610560848285610517565b509392505050565b600082601f83011261057d5761057c610450565b5b813561058d848260208601610526565b91505092915050565b600080600080608085870312156105b0576105af610314565b5b600085013567ffffffffffffffff8111156105ce576105cd610319565b5b6105da87828801610568565b94505060206105eb87828801610378565b93505060406105fc8782880161033f565b925050606061060d8782880161033f565b91505092959194509250565b600081519050919050565b600081905092915050565b60005b8381101561064d578082015181840152602081019050610632565b60008484015250505050565b600061066482610619565b61066e8185610624565b935061067e81856020860161062f565b80840191505092915050565b6000819050919050565b6106a56106a08261031e565b61068a565b82525050565b60006106b78285610659565b91506106c38284610694565b6020820191508190509392505050565b6106dc8161031e565b82525050565b6106eb81610354565b82525050565b600060808201905061070660008301876106d3565b61071360208301866106e2565b61072060408301856106d3565b61072d60608301846106d3565b95945050505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107a982610736565b91506107b483610736565b9250826107c4576107c3610740565b5b828204905092915050565b60006107da82610736565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361080c5761080b61076f565b5b600182019050919050565b600061082282610736565b915061082d83610736565b925082820261083b81610736565b915082820484148315176108525761085161076f565b5b5092915050565b600061086482610736565b915061086f83610736565b92508282039050818111156108875761088661076f565b5b92915050565b600061089882610736565b91506108a383610736565b92508282019050808211156108bb576108ba61076f565b5b92915050565b600081519050919050565b600081905092915050565b60006108e2826108c1565b6108ec81856108cc565b93506108fc81856020860161062f565b80840191505092915050565b600061091482856108d7565b915061092082846108d7565b9150819050939250505056fea2646970667358221220660c00a63b6705f67ee0109d34d371ace910fc90e6ed31c5effe0f1dff4af17564736f6c63430008120033';
export const abiVerifyMessage: AbiItem[] = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_hashedMessage',
        type: 'bytes32',
      },
      {
        internalType: 'uint8',
        name: '_v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: '_r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: '_s',
        type: 'bytes32',
      },
    ],
    name: 'VerifyMessage',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'message',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'VerifyString',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

export async function verifyMessageDeploy(rpcUrl: string, metamaskSeed: string, substrateSeed: string) {
  const wallet = ethers.Wallet.fromPhrase(metamaskSeed);

  const balance = await ethers.getDefaultProvider(rpcUrl).getBalance(wallet.address);
  console.log(`Deploy verifyMessage with a account: ${wallet.address}, with a balance: ${ethers.formatEther(balance)}`);

  const privateKey = wallet.privateKey;

  const web3 = new Web3(rpcUrl);

  const incrementer = new web3.eth.Contract(abiVerifyMessage);

  const incrementerTx = incrementer.deploy({
    data: bytecodeVerifyMessage,
    arguments: [],
  });

  const tx = await web3.eth.accounts.signTransaction(
    {
      data: incrementerTx.encodeABI(),
      gas: await incrementerTx.estimateGas(),
    },
    privateKey,
  );

  const { contractAddress, blockNumber } = await web3.eth.sendSignedTransaction(tx.rawTransaction as string);
  if (!contractAddress) {
    throw Error('Failed to publish contract');
  }

  return {
    contractAddress,
    blockNumber,
  };
}
