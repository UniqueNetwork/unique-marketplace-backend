import { ethers } from 'ethers';
import Web3 from 'web3';
import { AbiItem } from 'web3-utils';

const bytecodeVerifyMessage =
  '0x608060405234801561001057600080fd5b506103b3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063659934c114610030575b600080fd5b61004a6004803603810190610045919061019d565b610060565b6040516100579190610245565b60405180910390f35b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016100b09291906102f2565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516100ed9493929190610338565b6020604051602081039080840390855afa15801561010f573d6000803e3d6000fd5b505050602060405103519050809350505050949350505050565b600080fd5b6000819050919050565b6101418161012e565b811461014c57600080fd5b50565b60008135905061015e81610138565b92915050565b600060ff82169050919050565b61017a81610164565b811461018557600080fd5b50565b60008135905061019781610171565b92915050565b600080600080608085870312156101b7576101b6610129565b5b60006101c58782880161014f565b94505060206101d687828801610188565b93505060406101e78782880161014f565b92505060606101f88782880161014f565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022f82610204565b9050919050565b61023f81610224565b82525050565b600060208201905061025a6000830184610236565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610294578082015181840152602081019050610279565b60008484015250505050565b60006102ab82610260565b6102b5818561026b565b93506102c5818560208601610276565b80840191505092915050565b6000819050919050565b6102ec6102e78261012e565b6102d1565b82525050565b60006102fe82856102a0565b915061030a82846102db565b6020820191508190509392505050565b6103238161012e565b82525050565b61033281610164565b82525050565b600060808201905061034d600083018761031a565b61035a6020830186610329565b610367604083018561031a565b610374606083018461031a565b9594505050505056fea26469706673582212200112b7d4998221085b61f360db0487b068d3c728cf8f091ec1a95df865bce43364736f6c63430008120033';
export const abiVerifyMessage: AbiItem[] = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_hashedMessage',
        type: 'bytes32',
      },
      {
        internalType: 'uint8',
        name: '_v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: '_r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: '_s',
        type: 'bytes32',
      },
    ],
    name: 'VerifyMessage',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

export async function verifyMessageDeploy(rpcUrl: string, metamaskSeed: string, substrateSeed: string) {
  const wallet = ethers.Wallet.fromMnemonic(metamaskSeed);

  const balance = await ethers.getDefaultProvider(rpcUrl).getBalance(wallet.address);
  console.log(`Deploy verifyMessage with a account: ${wallet.address}, with a balance: ${ethers.utils.formatEther(balance)}`);

  const privateKey = wallet.privateKey;

  const web3 = new Web3(rpcUrl);

  const incrementer = new web3.eth.Contract(abiVerifyMessage);

  const incrementerTx = incrementer.deploy({
    data: bytecodeVerifyMessage,
    arguments: [],
  });

  const tx = await web3.eth.accounts.signTransaction(
    {
      data: incrementerTx.encodeABI(),
      gas: await incrementerTx.estimateGas(),
    },
    privateKey,
  );

  const { contractAddress, blockNumber } = await web3.eth.sendSignedTransaction(tx.rawTransaction as string);
  if (!contractAddress) {
    throw Error('Failed to publish contract');
  }

  return {
    contractAddress,
    blockNumber,
  };
}
